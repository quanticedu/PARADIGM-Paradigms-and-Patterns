from typing import Callable
from pymonad.tools import curry
from pymonad.either import Either, Left, Right
from pymonad.list import ListMonad, _List

nomads: _List[str] = ListMonad(
    "Heriot", "Julius", "Lil", "Gabriel", "Benjiman",
    "Warren", "Ossie", "Alexander", "Conrad", "Benjamin",
    "Julie", "Katie", "Leona", "Isa", "Caroline",
    "Sue", "Guadalupe", "Joyce", "George", "Alfreda"
)
towns: _List[str] = ListMonad(
    "Topermere", "Bucklepoint", "Ivorgate", "Pillfall", "Terrabarrow",
    "Cinderedge", "Bellbury", "Belvale", "Neddingstein", "Grimmere",
    "Galliefell", "Ashmire", "Snellport", "Umberton", "Whealingmourne",
    "Lillmoor", "Juggeredge", "Rookhaben", "Pitchwall", "Broadport",
    "Toperhaben", "Rainbury", "Ivorystein", "Belgue", "Decafall",
    "Pneuburn", "Bellhagen", "Bobbingham", "Slatebourne", "Gatterthain"
)

def is_in(x: str, y: str) -> bool:
    if not x:
        return True

    idx = y.lower().find(x[0].lower())

    if idx == -1:
        return False

    return is_in(x[1:], y[:idx] + y[idx + 1:])

Nomad = Either[str, str]
c_nomads: _List[Nomad] = nomads.map(Right)

@curry(2)
def visit(town: str, nomad: str) -> Nomad:
    if is_in(nomad, town):
        return Left(f"{nomad} settled in {town}")
    else:
        return Right(nomad)

VisitFn = Callable[[str], Nomad]
visit_fns: _List[VisitFn] = towns.map(visit)

@curry(2)
def trip(visit_fns: _List[VisitFn], nomad: Nomad) -> Nomad:
    if len(visit_fns) == 1:
        return nomad.bind(visit_fns[0])

    return trip(visit_fns[:-1], nomad).bind(visit_fns[-1])

print(c_nomads.map(trip(visit_fns)))
